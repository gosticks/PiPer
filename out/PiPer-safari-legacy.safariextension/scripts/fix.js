var a;a||(a=!0,(()=>{'use strict';let d=null,e=0,f={};const h=[],k=[],l=window.setTimeout,m=window.clearTimeout,n=window.requestAnimationFrame;window.requestAnimationFrame=function(a){let c=0;d||(c=n(a),h.push(c));k.push(a);return c};function p(){h.length=0;k.length=0;n(p)}p();function q(){var a=k.slice();k.length=0;const c=window.performance.now();for(var b;b=a.pop();)b(c);a=f;f={};for(let g in a)if(b=a[g],b[0]<=c)if("function"==typeof b[1])b[1]();else eval(b[1]);else f[g]=b}
function r(a,c){const b=e++;f[b.toString()]=[window.performance.now()+(c||0),a];return b}function t(a){a&&delete f[a.toString()]}
document.addEventListener("visibilitychange",function(){if(document.hidden){var a=document.querySelectorAll("video");for(var c=a.length;c--;){const g=a[c];var b="picture-in-picture"==g.webkitPresentationMode;if(b){d=g;break}}if(d){for(;b=h.pop();)window.cancelAnimationFrame(b);window.setTimeout=r;window.clearTimeout=t;d.addEventListener("timeupdate",q)}}else if(d){window.setTimeout=l;window.clearTimeout=m;d.removeEventListener("timeupdate",q);d=null;for(a=k.length;a--;)c=n(k[a]),h.push(c);a=window.performance.now();
for(b in f)c=f[b],l(c[1],c[0]-a);f={}}});})());
//# sourceMappingURL=data:application/json;base64,
